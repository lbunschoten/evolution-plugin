<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files\microsoft fxcop 1.35\Xml\FxCopReport.Xsl"?>
<FxCopReport Version="1.35">
	<Targets>
		<Target Name="SomeFile.dll">
			<Modules>
				<Module Name="SomeFile.dll">
					<Namespaces>
						<Namespace Name="SomeNamespace">
							<Types>
								<Type Name="SomeType" Kind="Class" Accessibility="Public"
									ExternallyVisible="True">
									<Members>
										<Member Name=".ctor(System.String)" Kind="Method"
											Static="False" Accessibility="Private" ExternallyVisible="False">
											<Messages>
												<Message TypeName="DoNotInitializeUnnecessarily"
													Category="Microsoft.Performance" CheckId="CA1805" Status="Active"
													Created="2007-02-09 21:32:31Z" FixCategory="NonBreaking">
													<Issue Certainty="90" Level="Warning" Path="SomePath"
														File="someFile.cs" Line="28">Description</Issue>
												</Message>
												<Message
													Id="System.ArgumentException.#ctor(System.String,System.String)"
													TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization"
													CheckId="CA1303" Status="Active" Created="2007-02-09 21:32:31Z"
													FixCategory="NonBreaking">
													<Issue Certainty="95" Level="Error" Path="SomePath"
														File="someFile.cs" Line="43">Description</Issue>
												</Message>
											</Messages>
										</Member>
										<Member Name="CallRemoteService(System.Data.DataSet):System.String"
											Kind="Method" Static="True" Accessibility="Public"
											ExternallyVisible="True">
											<Messages>
												<Message Id="stack0" TypeName="AvoidUnnecessaryStringCreation"
													Category="Microsoft.Performance" CheckId="CA1807" Status="Active"
													Created="2007-02-09 21:32:31Z" FixCategory="NonBreaking">
													<Issue Name="UseStringCompareLocal" Certainty="90"
														Level="Warning" Path="SomePath" File="someFile.cs" Line="193">Description
													</Issue>
												</Message>
												<Message Id="System.ArgumentException.#ctor(System.String)"
													TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization"
													CheckId="CA1303" Status="Active" Created="2007-02-09 21:32:31Z"
													FixCategory="NonBreaking">
													<Issue Certainty="95" Level="Error" Path="SomePath"
														File="someFile.cs" Line="200">Description</Issue>
												</Message>
												<Message
													Id="System.ArgumentNullException.#ctor(System.String,System.String)"
													TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization"
													CheckId="CA1303" Status="Active" Created="2007-02-09 21:32:31Z"
													FixCategory="NonBreaking">
													<Issue Certainty="95" Level="Error" Path="SomePath"
														File="someFile.cs" Line="188">Description</Issue>
												</Message>
												<Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo"
													Category="Microsoft.Globalization" CheckId="CA1304" Status="Active"
													Created="2007-02-09 21:32:31Z" FixCategory="NonBreaking">
													<Issue Certainty="95" Level="Error" Path="SomePath"
														File="someFile.cs" Line="193">Description
													</Issue>
												</Message>
											</Messages>
										</Member>
										<Member
											Name="CallRemoteService(System.String,System.Data.DataSet):System.String"
											Kind="Method" Static="True" Accessibility="Public"
											ExternallyVisible="True">
											<Messages>
												<Message
													Id="System.ArgumentNullException.#ctor(System.String,System.String)"
													TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization"
													CheckId="CA1303" Status="Active" Created="2007-02-09 21:32:31Z"
													FixCategory="NonBreaking">
													<Issue Certainty="95" Level="Error" Path="SomePath"
														File="someFile.cs" Line="210">Description
													</Issue>
												</Message>
												<Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly"
													Category="Microsoft.Naming" CheckId="CA1709" Status="Active"
													Created="2007-02-09 21:32:31Z" FixCategory="Breaking">
													<Issue Name="Parameter" Certainty="95" Level="Error"
														Path="SomePath" File="someFile.cs" Line="209">Description
													</Issue>
												</Message>
												<Message TypeName="InstantiateArgumentExceptionsCorrectly"
													Category="Microsoft.Usage" CheckId="CA2208" Status="Active"
													Created="2007-02-09 21:32:31Z" FixCategory="NonBreaking">
													<Issue Name="TwoArgumentsFirstShouldBeParameterName"
														Certainty="95" Level="CriticalError" Path="SomePath" File="someFile.cs"
														Line="210">Description
													</Issue>
												</Message>
												<Message Id="0#" TypeName="LongAcronymsShouldBePascalCased"
													Category="Microsoft.Naming" CheckId="CA1705" Status="Active"
													Created="2007-02-09 21:32:31Z" FixCategory="Breaking">
													<Issue Name="Parameter" Certainty="85" Level="Error"
														Path="SomePath" File="someFile.cs" Line="209">Description
													</Issue>
												</Message>
											</Messages>
										</Member>
										<Member Name="Finalize():System.Void" Kind="Method"
											Static="False" Accessibility="Family" ExternallyVisible="True">
											<Messages>
												<Message TypeName="RemoveEmptyFinalizers" Category="Microsoft.Performance"
													CheckId="CA1821" Status="Active" Created="2007-02-09 21:32:31Z"
													FixCategory="NonBreaking">
													<Issue Certainty="75" Level="Warning" Path="SomePath"
														File="someFile.cs" Line="67">Description
													</Issue>
												</Message>
											</Messages>
										</Member>
										<Member
											Name="GetWebServiceParameters(System.String):System.String[]"
											Kind="Method" Static="False" Accessibility="Private"
											ExternallyVisible="False">
											<Messages>
												<Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance"
													CheckId="CA1822" Status="Active" Created="2007-02-09 21:32:31Z"
													FixCategory="NonBreaking">
													<Issue Certainty="95" Level="Warning" Path="SomePath"
														File="someFile.cs" Line="155">Description
													</Issue>
												</Message>
											</Messages>
										</Member>
										<Member
											Name="ProxyToRemoteService(System.String,System.String,System.String,System.String):System.String"
											Kind="Method" Static="False" Accessibility="Private"
											ExternallyVisible="False">
											<Messages>
												<Message
													Id="System.String.Format(System.String,System.Object,System.Object,System.Object)"
													TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization"
													CheckId="CA1305" Status="Active" Created="2007-02-09 21:32:31Z"
													FixCategory="NonBreaking">
													<Issue Certainty="95" Level="Error" Path="SomePath"
														File="someFile.cs" Line="136">Description
													</Issue>
												</Message>
											</Messages>
										</Member>
									</Members>
								</Type>
							</Types>
						</Namespace>
					</Namespaces>
				</Module>
			</Modules>
		</Target>
	</Targets>
	<Rules>
		<Rule TypeName="AvoidUnnecessaryStringCreation" Category="Microsoft.Performance"
			CheckId="CA1807">
			<Name>Avoid unnecessary string creation</Name>
			<Description>Avoid creating strings unnecessarily. When converting
				strings to upper or lowercase, cache the result when necessary
				rather than duplicating a previous string creation. Prefer
				String.Compare over converting strings to upper or lowercase when
				performing case-insensitive comparisons. Do not create strings that
				are not subsequently assigned to variables.
			</Description>
			<Resolution Name="UseStringCompareLocal">{0} calls {1} after converting '{2}', a
				local, to upper or lowercase. If possible, eliminate the string
				creation and call the overload of String.Compare that performs a
				case-insensitive comparison.
			</Resolution>
			<Owner />
			<Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/AvoidUnnecessaryStringCreation.html
			</Url>
			<Email>[none]</Email>
			<MessageLevel Certainty="90">Warning</MessageLevel>
			<File Name="PerformanceRules.dll" Version="1.35.0.0" />
		</Rule>
		<Rule TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance"
			CheckId="CA1805">
			<Name>Do not initialize unnecessarily</Name>
			<Description>Do not make initializations that have already been done
				by the runtime.
			</Description>
			<Resolution Name="Default">{0} initializes field {1} of type {2} to
				{3}. Remove this initialization as it will be done automatically by
				the runtime.
			</Resolution>
			<Owner />
			<Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/DoNotInitializeUnnecessarily.html
			</Url>
			<Email>[none]</Email>
			<MessageLevel Certainty="90">Warning</MessageLevel>
			<File Name="PerformanceRules.dll" Version="1.35.0.0" />
		</Rule>
		<Rule TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization"
			CheckId="CA1303">
			<Name>Do not pass literals as localized parameters</Name>
			<Description>String literals that are embedded in source code are
				difficult to localize. Avoid passing string literals as arguments in
				circumstances where a localized string is generally expected. Most
				localized applications, for example, should localize string
				arguments that are passed to exception constructors. When creating
				an Exception instance, therefore, a string argument retrieved from a
				string table is more appropriate than a string literal.
			</Description>
			<Resolution Name="Default">{0} passes a literal as parameter {1} of
				a call to {2}. Retrieve the following string argument from a
				resource table instead: '{3}'
			</Resolution>
			<Owner />
			<Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Globalization/DoNotPassLiteralsAsLocalizedParameters.html
			</Url>
			<Email>[none]</Email>
			<MessageLevel Certainty="95">Error</MessageLevel>
			<File Name="GlobalizationRules.dll" Version="1.35.0.0" />
		</Rule>
		<Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming"
			CheckId="CA1709">
			<Name>Identifiers should be cased correctly</Name>
			<Description>Type, namespace, and member identifiers are
				pascal-cased. Parameter identifiers are camel-cased. The
				pascal-casing convention capitalizes the first letter of each word,
				as in BackColor. The camel-casing convention formats the first
				letter of the first word in lowercase and capitalizes the first
				letter of all subsequent words, as in backgroundColor.
			</Description>
			<Resolution Name="Parameter">Correct the casing of parameter name
				'{0}'.
			</Resolution>
			<Owner />
			<Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/IdentifiersShouldBeCasedCorrectly.html
			</Url>
			<Email>[none]</Email>
			<MessageLevel Certainty="95">Error</MessageLevel>
			<File Name="NamingRules.dll" Version="1.35.0.0" />
		</Rule>
		<Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage"
			CheckId="CA2208">
			<Name>Instantiate argument exceptions correctly</Name>
			<Description>String arguments passed to constructors of
				ArgumentException and its derived types should be correct. Types
				derived from ArgumentException have inconsistent constructor
				overloads with respect to the message and paramName parameters as
				compared to ArgumentException.
			</Description>
			<Resolution Name="TwoArgumentsFirstShouldBeParameterName">Calls to {0}'s constructor '{1}' should
				be in the order paramName, message instead of '{2}', '{3}'. Note
				that the provided parameter name should have the exact casing as
				declared on the method.
			</Resolution>
			<Owner />
			<Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Usage/InstantiateArgumentExceptionsCorrectly.html
			</Url>
			<Email>[none]</Email>
			<MessageLevel Certainty="95">CriticalError</MessageLevel>
			<File Name="UsageRules.dll" Version="1.35.0.0" />
		</Rule>
		<Rule TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming"
			CheckId="CA1705">
			<Name>Long acronyms should be pascal-cased</Name>
			<Description>Acronyms of three or more letters should be
				Pascal-cased. For example, use XmlSpace rather than XMLSpace. A
				violation of this rule might be required for compatibility with
				existing, non-managed symbol schemes. In general, however, these
				symbols should not be visible outside the assembly that uses them.
			</Description>
			<Resolution Name="Parameter">Correct the capitalization of parameter
				name '{0}'.
			</Resolution>
			<Owner />
			<Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/LongAcronymsShouldBePascalCased.html
			</Url>
			<Email>[none]</Email>
			<MessageLevel Certainty="85">Error</MessageLevel>
			<File Name="NamingRules.dll" Version="1.35.0.0" />
		</Rule>
		<Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance"
			CheckId="CA1822">
			<Name>Mark members as static</Name>
			<Description>Methods which do not access instance data or call
				instance methods can be marked as static (Shared in VB). After doing
				so, the compiler will emit non-virtual call sites to these members
				which will prevent a check at runtime for each call that insures the
				current object pointer is non-null. This can result in a measurable
				performance gain for performance-sensitive code. In some cases, the
				failure to access the current object instance represents a
				correctness issue.
			</Description>
			<Resolution Name="Default">The 'this' parameter (or 'Me' in VB) of
				{0} is never used. Mark the member as static (or Shared in VB) or
				use 'this'/'Me' in the method body or at least one property
				accessor, if appropriate.
			</Resolution>
			<Owner />
			<Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/MarkMembersAsStatic.html
			</Url>
			<Email>[none]</Email>
			<MessageLevel Certainty="95">Warning</MessageLevel>
			<File Name="PerformanceRules.dll" Version="1.35.0.0" />
		</Rule>
		<Rule TypeName="RemoveEmptyFinalizers" Category="Microsoft.Performance"
			CheckId="CA1821">
			<Name>Remove empty finalizers</Name>
			<Description>Finalizers should be avoided where possible, to avoid
				the additional performance overhead involved in tracking object
				lifetime.
			</Description>
			<Resolution Name="Default">{0} implements a finalizer that only
				calls conditionally emitted methods or the base type finalizer.
				Remove the finalizer or insure that it is only conditionally
				compiled into the assembly. If this violation occurs against a
				finalizer that is entirely wrapped in a conditionally-emitted block
				of code, suppress this message.
			</Resolution>
			<Owner />
			<Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/RemoveEmptyFinalizers.html
			</Url>
			<Email>[none]</Email>
			<MessageLevel Certainty="75">Warning</MessageLevel>
			<File Name="PerformanceRules.dll" Version="1.35.0.0" />
		</Rule>
		<Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization"
			CheckId="CA1304">
			<Name>Specify CultureInfo</Name>
			<Description>If an overload exists that takes a
				System.Globalization.CultureInfo argument, it should always be
				called in favor of an overload that does not. The CultureInfo type
				contains culture-specific information required for performing
				numeric and string operations, such as casing, formatting, and
				string comparisons. In scenarios where conversion and parsing
				behavior should never change between cultures, specify
				CultureInfo.InvariantCulture.
			</Description>
			<Resolution Name="Default">{0} makes a call to {1} that does not
				explicitly provide a CultureInfo. This should be replaced with a
				call to {2}.
			</Resolution>
			<Owner />
			<Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Globalization/SpecifyCultureInfo.html
			</Url>
			<Email>[none]</Email>
			<MessageLevel Certainty="95">Error</MessageLevel>
			<File Name="GlobalizationRules.dll" Version="1.35.0.0" />
		</Rule>
		<Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization"
			CheckId="CA1305">
			<Name>Specify IFormatProvider</Name>
			<Description>If an overload exists that takes an IFormatProvider
				argument, it should always be called in favor of an overload that
				does not. Some methods in the common language runtime convert a
				value to or from a string representation and take a string parameter
				that contains one or more characters, called format specifiers,
				which indicate how the value is to be converted. If the meaning of
				the format specifier varies by culture, a formatting object supplies
				the actual characters used in the string representation. In
				scenarios where sorting and comparison behavior should never change
				between cultures, specify CultureInfo.InvariantCulture.
			</Description>
			<Resolution Name="Default">{0} makes a call to {1} that does not
				explicitly provide an IFormatProvider. This should be replaced with
				a call to {2}.
			</Resolution>
			<Owner />
			<Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Globalization/SpecifyIFormatProvider.html
			</Url>
			<Email>[none]</Email>
			<MessageLevel Certainty="95">Error</MessageLevel>
			<File Name="GlobalizationRules.dll" Version="1.35.0.0" />
		</Rule>
	</Rules>
	<Localized>
		<String Key="Category">Category</String>
		<String Key="CollapseAll">Collapse All</String>
		<String Key="CheckId">Check Id</String>
		<String Key="Error">Error</String>
		<String Key="Errors">error(s)</String>
		<String Key="Line">Line</String>
		<String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
		<String Key="Project">Project</String>
		<String Key="Rule">Rule</String>
		<String Key="RuleDescription">Rule Description</String>
		<String Key="Source">Source</String>
		<String Key="Target">Target</String>
		<String Key="Warning">Warning</String>
		<String Key="Warnings">warning(s)</String>
		<String Key="ReportTitle">Code Analysis Report</String>
	</Localized>
</FxCopReport>